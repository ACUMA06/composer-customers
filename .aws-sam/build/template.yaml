Transform: AWS::Serverless-2016-10-31
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub:
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /customer:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createCustomer.Arn}/invocations
              responses: {}
          /customers/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getCustomer.Arn}/invocations
              responses: {}
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${updateCustomer.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteCustomer.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  customers:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  getCustomer:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getCustomer
      CodeUri: getCustomer
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          CUSTOMERS_TABLE_NAME:
            Ref: customers
          CUSTOMERS_TABLE_ARN:
            Fn::GetAtt:
            - customers
            - Arn
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: customers
      Events:
        ApiGETcustomersid:
          Type: Api
          Properties:
            Path: /customers/{id}
            Method: GET
            RestApiId:
              Ref: Api
    Metadata:
      SamResourceId: getCustomer
  getCustomerLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${getCustomer}
  createCustomer:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: createCustomer
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiPOSTcustomer:
          Type: Api
          Properties:
            Path: /customer
            Method: POST
            RestApiId:
              Ref: Api
      Environment:
        Variables:
          CUSTOMERS_TABLE_NAME:
            Ref: customers
          CUSTOMERS_TABLE_ARN:
            Fn::GetAtt:
            - customers
            - Arn
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: customers
      CodeUri: createCustomer
      Runtime: python3.12
      Handler: handler.handler
    Metadata:
      SamResourceId: createCustomer
  createCustomerLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${createCustomer}
  updateCustomer:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: updateCustomer
      CodeUri: updateCustomer
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          CUSTOMERS_TABLE_NAME:
            Ref: customers
          CUSTOMERS_TABLE_ARN:
            Fn::GetAtt:
            - customers
            - Arn
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: customers
      Events:
        ApiPUTcustomersid:
          Type: Api
          Properties:
            Path: /customers/{id}
            Method: PUT
            RestApiId:
              Ref: Api
    Metadata:
      SamResourceId: updateCustomer
  updateCustomerLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${updateCustomer}
  deleteCustomer:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: deleteCustomer
      CodeUri: deleteCustomer
      Handler: handler.handler
      Runtime: python3.12
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          CUSTOMERS_TABLE_NAME:
            Ref: customers
          CUSTOMERS_TABLE_ARN:
            Fn::GetAtt:
            - customers
            - Arn
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: customers
      Events:
        ApiDELETEcustomersid:
          Type: Api
          Properties:
            Path: /customers/{id}
            Method: DELETE
            RestApiId:
              Ref: Api
    Metadata:
      SamResourceId: deleteCustomer
  deleteCustomerLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${deleteCustomer}
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: Actions
      Members:
      - createCustomer
      - getCustomer
      - updateCustomer
      - deleteCustomer
